{"version":3,"sources":["serviceWorker.ts","actions/index.ts","actions/actions.ts","constants.ts","components/Buttons.tsx","components/StatsBar.tsx","components/Typing.tsx","components/TextInfo.tsx","components/App.tsx","reducers/text.ts","reducers/typing.ts","reducers/index.ts","store.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ActionName","Mode","newText","mode","words","action","changeCharsTyped","charsTyped","changeCharsTypes","changeErrorPercent","errorPercent","PRINTABLE_CHARACTERS","split","SYMBOLS","NUMBERS","Buttons","input","ref1","React","ref2","ref3","ref4","ref5","ref6","repeatedWordsMode","handleChange","event","_this","setState","target","value","handleSubmit","props","repeatedWords","preventDefault","ref","_this2","this","react","onClick","current","blur","_this3","_this$state","renderModeButton","quote","code","random","symbols","numbers","style","display","onSubmit","type","onChange","connect","dispatch","StatsBar","chars","hundredths","timer","startTimer","setInterval","tick","produce","draft","stopTimer","clearInterval","prevProps","prevState","sec","wpm","cps","toFixed","padStart","typingData","Typing","cursorPosition","errorPosition","undefined","errorSum","_this$props","text","keydown","includes","key","length","_this$state2","fontFamily","color","background","slice","backgroundColor","textData","percent","TextInfo","author","context","App","ALL_KEYS","href","components_Buttons","components_StatsBar","components_Typing","components_TextInfo","newQuote","_ref","_","quotes","initialState","combineReducers","arguments","payload","map","join","newRandom","newSymbols","newNumbers","newRepeated","Object","objectSpread","createStore","rootReducer","ReactDOM","es","store","components_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d15387d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionType } from 'typesafe-actions'\n\nimport * as actions from './actions'\n\nexport type Action = ActionType<typeof actions>\n\nexport * from './actions'\n\nexport enum ActionName {\n  newText = 'NEW_TEXT',\n  changeCharsTypes = 'CHANGE_CHARS_TYPED',\n  changeErrorPercent = 'CHANGE_ERROR_PERCENT',\n}\n","import { action } from 'typesafe-actions'\n\nimport { ActionName } from './index'\n\nexport const newText = (mode?: string, words?: string[]) =>\n  action(ActionName.newText, { mode, words })\n\nexport const changeCharsTyped = (charsTyped: number) =>\n  action(ActionName.changeCharsTypes, { charsTyped })\n\nexport const changeErrorPercent = (errorPercent: number) =>\n  action(ActionName.changeErrorPercent, { errorPercent })\n","export const PRINTABLE_CHARACTERS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./<>?;:\\'\"[]\\\\{}|`~!@#$%^&*()-_=+ '.split(\n  '',\n)\n\nexport const SYMBOLS = ',./<>?;:\\'\"[]\\\\{}|`~!@#$%^&*()-_=+'.split('')\n\nexport const NUMBERS = '0123456789'.split('')\n\nexport const RANDOM_LENGTH = 50\n\nexport enum Mode {\n  quote = 'quote',\n  code = 'code',\n  random = 'random',\n  symbols = 'symbols',\n  numbers = 'numbers',\n  repeatedWords = 'repeated-words',\n}\n\nexport const GITHUB_URL = 'https://github.com/cjbassi/wpm-spa'\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\n\nimport { newText } from '../actions/actions'\nimport { Mode } from '../constants'\n\ninterface IButtonProps {\n  newText: (mode?: string, words?: string[]) => void\n}\n\ninterface IButtonState {\n  input: string\n  ref1: any\n  ref2: any\n  ref3: any\n  ref4: any\n  ref5: any\n  ref6: any\n  repeatedWordsMode: boolean\n}\n\nclass Buttons extends React.Component<IButtonProps, IButtonState> {\n  public readonly state: IButtonState = {\n    input: '',\n    ref1: React.createRef(),\n    ref2: React.createRef(),\n    ref3: React.createRef(),\n    ref4: React.createRef(),\n    ref5: React.createRef(),\n    ref6: React.createRef(),\n    repeatedWordsMode: false,\n  }\n\n  private handleChange = (event: any) => {\n    this.setState({ input: event.target.value })\n  }\n\n  private handleSubmit = (event: any) => {\n    this.props.newText(Mode.repeatedWords, this.state.input.split(' '))\n    event.preventDefault()\n  }\n\n  private renderModeButton(ref: any, mode: string) {\n    return (\n      <button\n        ref={ref}\n        onClick={() => {\n          this.setState({ repeatedWordsMode: false })\n          this.props.newText(mode)\n          ref.current.blur()\n        }}\n      >\n        {mode}\n      </button>\n    )\n  }\n\n  public render() {\n    const {\n      input,\n      ref1,\n      ref2,\n      ref3,\n      ref4,\n      ref5,\n      ref6,\n      repeatedWordsMode,\n    } = this.state\n    return (\n      <div>\n        {this.renderModeButton(ref1, Mode.quote)}\n        {this.renderModeButton(ref2, Mode.code)}\n        {this.renderModeButton(ref3, Mode.random)}\n        {this.renderModeButton(ref4, Mode.symbols)}\n        {this.renderModeButton(ref5, Mode.numbers)}\n        <button\n          ref={ref6}\n          onClick={() => {\n            this.setState({ repeatedWordsMode: !repeatedWordsMode })\n            ref4.current.blur()\n          }}\n        >\n          {Mode.repeatedWords}\n        </button>\n        {repeatedWordsMode && (\n          <div style={{ display: 'inline' }}>\n            {' '}\n            <form style={{ display: 'inline' }} onSubmit={this.handleSubmit}>\n              <input type='text' value={input} onChange={this.handleChange} />\n              <input type='submit' value='Submit' />\n            </form>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    newText: (mode?: string, words?: string[]) => {\n      dispatch(newText(mode, words))\n    },\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(Buttons)\n","import produce from 'immer'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport { IStoreState } from '../store'\n\ninterface IStatsProps {\n  chars: number\n  errorPercent: number\n}\n\ninterface IStatsState {\n  timer: any\n  hundredths: number\n  chars: number\n}\n\nclass StatsBar extends React.Component<IStatsProps, IStatsState> {\n  public readonly state: IStatsState = {\n    chars: this.props.chars,\n    hundredths: 0,\n    timer: null,\n  }\n\n  private startTimer = () => {\n    this.setState({\n      hundredths: 0,\n      timer: setInterval(this.tick, 10),\n    })\n  }\n\n  private tick = () => {\n    this.setState(\n      produce<IStatsState>(this.state, (draft) => {\n        draft.hundredths += 1\n      }),\n    )\n  }\n\n  private stopTimer = () => {\n    clearInterval(this.state.timer)\n  }\n\n  public componentDidUpdate(prevProps: IStatsProps, prevState: IStatsState) {\n    if (this.props === prevProps) {\n      return\n    }\n    const { chars } = this.props\n    if (prevProps.chars === 0 && chars === 1) {\n      // if we are starting typing a new text\n      this.startTimer()\n      this.setState({\n        chars,\n      })\n    } else if (prevProps.chars !== 0 && chars === 0) {\n      // if we finished a text\n      this.stopTimer()\n      this.setState({\n        chars: prevProps.chars,\n      })\n    } else {\n      // if we are in the middle of a text\n      this.setState({\n        chars,\n      })\n    }\n  }\n\n  public render() {\n    const { chars, hundredths } = this.state\n    const { errorPercent } = this.props\n    const sec = hundredths / 100\n    const wpm = sec === 0 ? 0 : chars / 5 / (sec / 60)\n    const cps = sec === 0 ? 0 : chars / sec\n    return (\n      <div>\n        <span>{wpm.toFixed(0).padStart(3, '0')} wpm</span>\n        <span> {cps.toFixed(1).padStart(4, '0')} cps</span>\n        <span> {(100 - errorPercent).toFixed(2).padStart(6, '0')}% acc</span>\n        <span> {sec.toFixed(1)}s</span>\n      </div>\n    )\n  }\n}\n\nconst matchStateToProps = (state: IStoreState) => {\n  return {\n    chars: state.typingData.charsTyped,\n    errorPercent: state.typingData.errorPercent,\n  }\n}\n\nexport default connect(matchStateToProps)(StatsBar)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\n\nimport {\n  changeCharsTyped,\n  changeErrorPercent,\n  newText,\n} from '../actions/actions'\nimport { PRINTABLE_CHARACTERS } from '../constants'\nimport { IStoreState } from '../store'\n\nconst TYPED_COLOR = '#A0A0A0'\nconst CURSOR_COLOR = '#BEBEBE'\nconst ERROR_COLOR = 'red'\nconst FONT = '\"Courier New\", Courier, monospace'\n\ninterface ITypingProps {\n  text: string\n  newText: () => void\n  keydown: any\n  changeCharsTyped: (chars: number) => void\n  changeErrorPercent: (error: number) => void\n}\n\ninterface ITypingState {\n  cursorPosition: number\n  errorPosition?: number\n  errorSum: number\n}\n\nclass Typing extends React.Component<ITypingProps, ITypingState> {\n  public readonly state: ITypingState = {\n    cursorPosition: 0,\n    errorPosition: undefined,\n    errorSum: 0,\n  }\n\n  public componentDidUpdate(prevProps: ITypingProps) {\n    // tslint:disable-next-line:no-shadowed-variable\n    const { text, newText, changeCharsTyped, changeErrorPercent } = this.props\n    let { cursorPosition, errorPosition, errorSum } = this.state\n    const { keydown } = prevProps\n    if (prevProps.keydown.event) {\n      if (PRINTABLE_CHARACTERS.includes(keydown.event.key)) {\n        // if a printable character was just typed\n        if (\n          errorPosition === undefined &&\n          keydown.event.key !== text[cursorPosition]\n        ) {\n          // set errorPosition to cursorPosition if we typed an error without any outstanding errors\n          errorPosition = cursorPosition\n          errorSum += 1\n          changeErrorPercent(100 * (errorSum / text.length))\n        }\n        cursorPosition += 1\n        // start a new session if we reach the end with no outstanding errors\n        if (cursorPosition === text.length && errorPosition === undefined) {\n          newText()\n          cursorPosition = 0\n          errorPosition = undefined\n          errorSum = 0\n        }\n        // make sure the cursor doesn't go more than 1 past the length if we finish a session with outstanding errors\n        if (cursorPosition > text.length) {\n          cursorPosition -= 1\n        }\n        this.setState({\n          cursorPosition,\n          errorPosition,\n          errorSum,\n        })\n      } else if (keydown.event.key === 'Backspace') {\n        if (cursorPosition > 0) {\n          cursorPosition -= 1\n          // checks to see if we can set errorPosition to undefined if we backspaced over it\n          errorPosition =\n            errorPosition === undefined\n              ? undefined\n              : cursorPosition > errorPosition\n                ? errorPosition\n                : undefined\n          this.setState({\n            cursorPosition,\n            errorPosition,\n          })\n        }\n      }\n      const chars =\n        errorPosition === undefined ? cursorPosition : errorPosition\n      changeCharsTyped(chars)\n    } else if (prevProps.text !== text) {\n      this.setState({\n        cursorPosition: 0,\n        errorPosition: undefined,\n      })\n    }\n  }\n\n  public render() {\n    const { text } = this.props\n    const { cursorPosition, errorPosition } = this.state\n    return (\n      <div style={{ fontFamily: FONT }}>\n        <mark style={{ color: TYPED_COLOR, background: '#ffffff' }}>\n          {text.slice(\n            0,\n            errorPosition === undefined ? cursorPosition : errorPosition,\n          )}\n        </mark>\n        {errorPosition !== undefined && (\n          <mark style={{ backgroundColor: ERROR_COLOR }}>\n            {text.slice(errorPosition, cursorPosition)}\n          </mark>\n        )}\n        <mark style={{ backgroundColor: CURSOR_COLOR }}>\n          {text[cursorPosition]}\n        </mark>\n        {text.slice(cursorPosition + 1, text.length)}\n      </div>\n    )\n  }\n}\n\nconst matchStateToProps = (state: IStoreState) => {\n  return {\n    text: state.textData.text,\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    changeCharsTyped: (chars: number) => {\n      dispatch(changeCharsTyped(chars))\n    },\n    changeErrorPercent: (percent: number) => {\n      dispatch(changeErrorPercent(percent))\n    },\n    newText: () => {\n      dispatch(newText())\n      dispatch(changeCharsTyped(0))\n      dispatch(changeErrorPercent(0))\n    },\n  }\n}\n\nexport default connect(\n  matchStateToProps,\n  mapDispatchToProps,\n)(Typing)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport { IStoreState } from '../store'\n\ninterface ITextInfoProps {\n  author?: string\n  context?: string\n}\n\nclass TextInfo extends React.Component<ITextInfoProps> {\n  public render() {\n    const { author, context } = this.props\n    return (\n      <div>\n        -{author}, {context}\n      </div>\n    )\n  }\n}\n\nconst matchStateToProps = (state: IStoreState) => {\n  return {\n    author: state.textData.author,\n    context: state.textData.context,\n  }\n}\n\nexport default connect(matchStateToProps)(TextInfo)\n","import * as React from 'react'\nimport keydown, { ALL_KEYS } from 'react-keydown'\nimport { connect } from 'react-redux'\n\nimport Buttons from '../components/Buttons'\nimport Stats from '../components/StatsBar'\nimport Typing from '../components/Typing'\nimport { GITHUB_URL } from '../constants'\nimport { IStoreState } from '../store'\nimport TextInfo from './TextInfo'\n\ninterface IAppProps {\n  author?: string\n  keydown?: any\n}\n\n@keydown(ALL_KEYS)\nclass App extends React.Component<IAppProps> {\n  public render() {\n    // tslint:disable-next-line:no-shadowed-variable\n    const { author, keydown } = this.props\n    return (\n      <div>\n        <h3>\n          <a href={GITHUB_URL}>wpm-spa</a>\n        </h3>\n        <Buttons />\n        <br />\n        <Stats />\n        <br />\n        <Typing keydown={keydown} />\n        {author !== undefined && (\n          <div>\n            <br />\n            <TextInfo />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IStoreState) => {\n  return {\n    author: state.textData.author,\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","import * as _ from 'lodash'\n\nimport { Action, ActionName } from '../actions'\nimport {\n  Mode,\n  NUMBERS,\n  PRINTABLE_CHARACTERS,\n  RANDOM_LENGTH,\n  SYMBOLS,\n} from '../constants'\nimport quotes from '../static/quotes.json'\nimport { ITextData } from '../store'\n\nexport const newQuote = (): ITextData => {\n  const { author, context, text } = _.sample(quotes)!\n  console.log(text)\n  return {\n    author,\n    context,\n    mode: Mode.quote,\n    text,\n  }\n}\n\nexport const newCode = (): ITextData => {\n  return {\n    author: undefined,\n    context: undefined,\n    mode: Mode.code,\n    text: '', // TODO\n  }\n}\n\nexport const newRandom = (): ITextData => {\n  const text = _.range(RANDOM_LENGTH)\n    .map(() => _.sample(PRINTABLE_CHARACTERS))\n    .join('')\n  return {\n    author: undefined,\n    context: undefined,\n    mode: Mode.random,\n    text,\n  }\n}\n\nexport const newSymbols = (): ITextData => {\n  const text = _.range(RANDOM_LENGTH)\n    .map(() => _.sample(SYMBOLS))\n    .join('')\n  return {\n    author: undefined,\n    context: undefined,\n    mode: Mode.symbols,\n    text,\n  }\n}\n\nexport const newNumbers = (): ITextData => {\n  const text = _.range(RANDOM_LENGTH)\n    .map(() => _.sample(NUMBERS))\n    .join('')\n  return {\n    author: undefined,\n    context: undefined,\n    mode: Mode.numbers,\n    text,\n  }\n}\n\nexport const newRepeated = (words?: string[]): ITextData => {\n  const text = _.range(RANDOM_LENGTH)\n    .map(() => _.sample(words))\n    .join(' ')\n  return {\n    author: undefined,\n    context: undefined,\n    mode: Mode.repeatedWords,\n    text,\n  }\n}\n\nexport default (state: ITextData = newQuote(), action: Action): ITextData => {\n  switch (action.type) {\n    case ActionName.newText:\n      const mode =\n        action.payload.mode === undefined ? state.mode : action.payload.mode\n      switch (mode) {\n        case Mode.quote:\n          return newQuote()\n        case Mode.code:\n          return newCode()\n        case Mode.random:\n          return newRandom()\n        case Mode.symbols:\n          return newSymbols()\n        case Mode.numbers:\n          return newNumbers()\n        case Mode.repeatedWords:\n          return newRepeated(action.payload.words)\n        default:\n          return state\n      }\n    default:\n      return state\n  }\n}\n","import { Action, ActionName } from '../actions'\nimport { ITypingData } from '../store'\n\nconst initialState = {\n  charsTyped: 0,\n  errorPercent: 0,\n}\n\nexport default (\n  state: ITypingData = initialState,\n  action: Action,\n): ITypingData => {\n  switch (action.type) {\n    case ActionName.changeCharsTypes:\n    case ActionName.changeErrorPercent:\n      return {\n        ...state,\n        ...action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { Action } from '../actions'\nimport { IStoreState } from '../store'\nimport textData from './text'\nimport typingData from './typing'\n\nexport default combineReducers<IStoreState, Action>({\n  textData,\n  typingData,\n})\n","import { createStore } from 'redux'\n\nimport rootReducer from './reducers'\n\nexport interface ITextData {\n  mode: string\n  text: string\n  author?: string\n  context?: string\n}\n\nexport interface ITypingData {\n  charsTyped: number\n  errorPercent: number\n}\n\nexport interface IStoreState {\n  textData: ITextData\n  typingData: ITypingData\n}\n\nexport default createStore<IStoreState, any, any, any>(rootReducer)\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root') as HTMLElement,\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}